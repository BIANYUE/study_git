import json
import re
import time
from urllib.parse import urlencode

import requests
import urllib3
from Crypto.Cipher import AES
import base64

from lib.tool import wirte_data, req
from settings import DATA_PATH

urllib3.disable_warnings()


class ComLeitingLt401:
    def __init__(self, app):
        self.headers = {
            'User-Agent': 'Dalvik/2.1.0 (Linux; U; Android 8.1.0; Pixel XL Build/OPM4.171019.021.P1)',
            'Host': 'www.l66et.xyz:20000',
            'Connection': 'Keep-Alive',
            'Accept-Encoding': 'gzip',
        }
        self.path_name = '/'.join([DATA_PATH, app["data_type"], app["data"]])

    def main(self):
        datas = json.loads(self.get_iplist())["res"]
        print(datas)
        for data in datas:
            # print(data)
            for d in data["data"]:
                i = d["id"]
                res = base64.b64decode(self.decrypt(base64.b64decode(self.get_ipinfo(i)))[8:]).decode()
                print(res)
                wirte_data(res + "\n", self.path_name)

    def decrypt(self, text):
        key = "ks9KUrbWJj46AftX".encode('utf-8')
        iv = "ks9KUrbWJj46AftX".encode('utf-8')
        cryptos = AES.new(key, AES.MODE_CBC, iv)
        plain_text = cryptos.decrypt(text)
        return plain_text.decode()

    def get_ipinfo(self, i):
        #url = f"https://www.lt04wp.xyz:20000/api/evmess?&proto=v2&platform=android&ver=4.0.1&deviceid=203524de68e3a5c1HT73Y0203537&unicode=203524de68e3a5c1HT73Y0203537&t=1691397593444&code=GCDWW5&recomm_code=&f=2023-06-30&install=2023-06-30&token=aGeZa2ZvlY+TjmZva2ZraZKaZmtjlWqVXm2Wk5JlmmVqaA==&package=com.leiting.lt401&width=411.42856&height=683.4286&w=1440&h=2560&newlt=1&isvip=true&unlimit=true&apps=52538539b033c6bdc2f14ea8f3df8482&area=2"
        url = f"https://www.l66et.xyz:20000/api/evmess?&proto=v2&platform=android&ver=4.0.1&deviceid=6cf0199a3636adf8HT72E0200036&unicode=6cf0199a3636adf8HT72E0200036&t=1704964806635&code=OW4J0V&recomm_code=&f=2023-12-21&install=2023-12-21&token=aGiaZWtqnY+UjmZvbGpmb5ibZmpjlWqVXm2Wk5pokmllZg==&package=com.leiting.lt401&width=411.42856&height=683.4286&w=1440&h=2560&newlt=1&isvip=true&unlimit=true&apps=a865abf82a2527644f47bfb4fd44bad3&area=34"
        params = {
            'proto': 'v2',
            'platform': 'android',
            'ver': '4.0.1',
            #'deviceid': '203524de68e3a5c1HT73Y0203537',
            #'unicode': '203524de68e3a5c1HT73Y0203537',
            'deviceid': '6cf0199a3636adf8HT72E0200036',
            'unicode': '6cf0199a3636adf8HT72E0200036',
            't': str(int(time.time() * 1000)),
            #'code': 'GCDWW5',
            'code': 'OW4J0V',
            'recomm_code': '',
            # 'f': '2023-06-30',
            # 'install': '2023-06-30',
            'f': '2023-12-21',
            'install': '2023-12-21',
            # 'token': 'aGeZa2ZvlY+TjmZva2ZraZKaZmtjlWqVXm2Wk5JlmmVqaA',
            'token': 'aGiaZWtqnY+UjmZvbGpmb5ibZmpjlWqVXm2Wk5pokmllZg',
            'package': 'com.leiting.lt401',
            'width': '411.42856',
            'height': '683.4286',
            'w': '1440',
            'h': '2560',
            'newlt': '1',
            'isvip': 'true',
            'unlimit': 'true',
            #'apps': '52538539b033c6bdc2f14ea8f3df8482',
            'apps': 'a865abf82a2527644f47bfb4fd44bad3',
            'area': i,
        }
        self.headers["Host"] = "www.lypazt.xyz:20000"
        url += urlencode(params)
        response = req(url, headers=self.headers)
        print(response.text)
        return response.text

    def get_iplist(self):
        # time.sleep(3)
        url = f"https://www.lypazt.xyz:20000/myapi/apinodelist?"
        # url = f"http://www.166et.xyz:20000/myapi/eapiuserinfo?"

        params = {
            'level': '2',
            'proto': 'v2',
            'platform': 'android',
            'ver': '4.0.1',
            # 'deviceid': '203524de68e3a5c1HT73Y0203537',
            'deviceid': '6cf0199a3636adf8HT72E0200036',
            # 'unicode': '203524de68e3a5c1HT73Y0203537',
            'unicode': '6cf0199a3636adf8HT72E0200036',
            # 't': '1691397655380',
            't': '1703209130106',
            # 'code': 'GCDWW5',
            'code': 'OW4J0V',
            'recomm_code': '',
            # 'f': '2023-06-30',
            # 'install': '2023-06-30',
            'f': '2023-12-21',
            'install': '2023-12-21',
            'token': 'aGiaZWtqnY+UjmZvbGpmb5ibZmpjlWqVXm2Wk5pokmllZg',
            # 'token': 'aGeZa2ZvlY+TjmZva2ZraZKaZmtjlWqVXm2Wk5JlmmVqaA',
            'package': 'com.leiting.lt401',
            'width': '411.42856',
            'height': '683.4286',
            'w': '1440',
            'h': '2560',
            'newlt': '1',
            'isvip': 'true',
            'unlimit': 'true',
            # 'apps': '52538539b033c6bdc2f14ea8f3df8482',
            'apps': 'a865abf82a2527644f47bfb4fd44bad3',
        }
        self.headers["Host"] = "www.lypazt.xyz:20000"
        # self.headers["Host"] = "www.166et.xyz:20000"

        url += urlencode(params)
        response = req(url, headers=self.headers)
        print(response.text)
        return response.text


if __name__ == '__main__':
    app = {
        'appPackage': 'com.leiting.lt401',
        'package': 'com.leiting.lt401',
        'appActivity': '',
        'click_file': 'com_leiting_lt401',
        'process': 'com_leiting_lt401',
        'data': 'com_leiting_lt401',
        'data_type': 'data',
        'class_name': '',
        'type': 'request',
    }
    c = ComLeitingLt401(app)
    c.main()
    # link = ""
    # a = base64.b64decode(link)
    # print(c.decrypt(a))
    # c.get_iplist()
    # c.get_ipinfo(108)
